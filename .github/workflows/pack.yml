name: pack-and-publish

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build-test-pack:
    name: Build, Test, Pack
    runs-on: ubuntu-latest
    outputs:
      pkg_version: ${{ steps.set_pkg_version.outputs.pkg_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # required for versioning to see full history
          fetch-tags: true

      - name: Configure git safe.directory (for act/docker)
        shell: bash
        run: |
          set -euo pipefail
          echo "Marking $GITHUB_WORKSPACE as a safe git directory"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Diagnose git repo state (pre-GitVersion)
        shell: bash
        run: |
          set -euo pipefail
          pwd
          ls -la || true
          echo "-- .git directory --"
          ls -la .git || echo ".git missing"
          echo "-- git status --"
          git status || true
          echo "-- rev-parse HEAD --"
          git rev-parse HEAD || true
          echo "-- branches --"
          git branch -a || true
          echo "-- tags (head) --"
          git tag -l | tail -n 5 || true

      - name: Ensure full git history under act
        if: env.ACT == 'true'
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -d .git ] || ! git rev-parse HEAD >/dev/null 2>&1; then
            echo "Reconstructing git repository for act so GitVersion can run"
            git init
            git config user.email "act@example.com"
            git config user.name "act"
            git remote add origin "https://github.com/${GITHUB_REPOSITORY}.git"
            # Fetch full history and tags
            git fetch --prune --tags --force origin
            target_ref="${GITHUB_SHA:-}"
            if [ -z "$target_ref" ]; then
              target_ref="origin/${GITHUB_REF_NAME:-main}"
            fi
            echo "Checking out $target_ref"
            git checkout -B "${GITHUB_REF_NAME:-main}" "$target_ref" || git checkout "$target_ref" || git checkout -B main origin/main
          else
            echo "Git repository detected; skipping reconstruction"
          fi

      - name: Diagnose git repo state (post-repair)
        if: env.ACT == 'true'
        shell: bash
        run: |
          set -euo pipefail
          git rev-parse HEAD
          git describe --tags --always || true

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # Use official GitVersion Action to calculate version from history/commits
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v2
        with:
          versionSpec: '6.0.x'

      - name: Debug GitVersion CLI (act only)
        if: env.ACT == 'true'
        shell: bash
        run: |
          set -euo pipefail
          echo "Installing GitVersion.Tool for act..."
          dotnet tool install -g GitVersion.Tool || true
          export PATH="$PATH:$HOME/.dotnet/tools"
          echo "dotnet-gitversion version:"
          dotnet-gitversion /version || true
          echo "Running dotnet-gitversion with Diagnostic verbosity..."
          set +e
          timeout 30s dotnet-gitversion . /output json /config GitVersion.yml /verbosity Diagnostic /nofetch
          rc=$?
          set -e
          echo "dotnet-gitversion exit code: $rc"
          if [ $rc -ne 0 ]; then
            echo "Listing .git details for troubleshooting:"; ls -la .git || true
            echo "Show last commits:"; git log --oneline -n 15 || true
            # Do not fail here; the next step will compute version or fail cleanly
          fi

      - name: Determine Package Version (GitVersion)
        id: gitversion
        uses: gittools/actions/gitversion/execute@v2
        with:
          useConfigFile: true
          configFilePath: GitVersion.yml
          verbosity: Diagnostic
          additionalArguments: /nofetch

      - name: Set PackageVersion env (MajorMinorPatch only)
        id: set_pkg_version
        shell: bash
        run: |
          set -euo pipefail
          # Use MajorMinorPatch from GitVersion and fail if missing (required for both GitHub and act)
          ver='${{ steps.gitversion.outputs.MajorMinorPatch }}'
          if [ -z "$ver" ]; then
            echo "ERROR: GitVersion did not produce MajorMinorPatch. Failing build." >&2
            exit 1
          fi
          echo "Using package version: $ver"
          echo "PKG_VERSION=$ver" >> "$GITHUB_ENV"
          echo "pkg_version=$ver" >> "$GITHUB_OUTPUT"

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.fsproj', 'global.json', 'NuGet.Config') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Ensure package output directory
        run: mkdir -p ./.nupkgs

      - name: Copy main README into ShimGen (for NuGet)
        shell: bash
        run: |
          set -euo pipefail
          cp -f README.md ShimGen/README.md

      # Phase 1: Create local feed by packing the dependency projects first
      - name: Pack Annotations (bootstrap local feed)
        timeout-minutes: 5
        run: dotnet pack Annotations/Headsetsniper.Godot.FSharp.Annotations.csproj -c Release -o ./.nupkgs /p:Version=${{ env.PKG_VERSION }}

      - name: Pack ShimGen (bootstrap local feed)
        timeout-minutes: 5
        run: dotnet pack ShimGen/Headsetsniper.Godot.FSharp.ShimGen.csproj -c Release -o ./.nupkgs /p:Version=${{ env.PKG_VERSION }}

      # Phase 2: Restore/build/test the rest using the local feed + nuget.org
      - name: Restore main project
        timeout-minutes: 10
        run: dotnet restore ExampleProject/FsharpWithShim.csproj -p:ShimGenPackageVersion=${{ env.PKG_VERSION }} --configfile ExampleProject/NuGet.Config

      - name: Build (Release)
        timeout-minutes: 15
        run: dotnet build ExampleProject/FsharpWithShim.csproj -c Release --no-restore -p:ShimGenPackageVersion=${{ env.PKG_VERSION }}

      - name: Test (Release)
        timeout-minutes: 15
        run: dotnet test ShimGen.Tests/ShimGen.Tests.csproj -c Release --verbosity normal

      - name: Verify packages produced
        shell: bash
        run: |
          set -euo pipefail
          echo "Resolved version: ${{ env.PKG_VERSION }}"
          echo "Listing ./.nupkgs contents:" && ls -la ./.nupkgs || true
          count=$(ls -1 ./.nupkgs/*.nupkg 2>/dev/null | wc -l | xargs)
          if [ "$count" = "0" ]; then
            echo "ERROR: No .nupkg files were produced in ./.nupkgs" >&2
            exit 1
          fi

      - name: Create and push git tag
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && env.ACT != 'true'
        shell: bash
        timeout-minutes: 2
        run: |
          set -euo pipefail
          TAG="v${PKG_VERSION}"
          echo "Preparing to create tag: $TAG"
          # Ensure we have all tags locally for idempotency checks
          git fetch --tags --force --prune || true
          if git rev-parse -q --verify "refs/tags/${TAG}" >/dev/null; then
            echo "Tag ${TAG} already exists locally; skipping tag create/push"
            exit 0
          fi
          if git ls-remote --tags origin "refs/tags/${TAG}" | grep -q .; then
            echo "Tag ${TAG} already exists on origin; skipping tag create/push"
            exit 0
          fi
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          git tag -a "${TAG}" -m "Release ${TAG}"
          git push origin "${TAG}"

      - name: Upload .nupkgs
        if: env.ACT != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: nupkgs
          path: ${{ github.workspace }}/.nupkgs
          if-no-files-found: error
          include-hidden-files: true

  publish-nuget:
    name: Publish to NuGet.org
    needs: build-test-pack
    # Publish on pushes to main (no tag dependency). Guard to avoid PRs.
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: nupkgs
          path: ./.nupkgs

      - name: Push to NuGet.org
        timeout-minutes: 10
        run: dotnet nuget push ./.nupkgs/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate

  # Optional: Publish to GitHub Packages (NuGet)
  # Enable by setting `if: startsWith(github.ref, 'refs/tags/v')` and configuring permissions
  publish-gpr:
    name: Publish to GitHub Packages
    needs: build-test-pack
    if: false
    runs-on: ubuntu-latest
    steps:
      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: nupkgs
          path: ./.nupkgs

      - name: Push to GitHub Packages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          OWNER=${{ github.repository_owner }}
          dotnet nuget push ./.nupkgs/*.nupkg \
            --api-key "$GITHUB_TOKEN" \
            --source "https://nuget.pkg.github.com/${OWNER}/index.json" \
            --skip-duplicate
