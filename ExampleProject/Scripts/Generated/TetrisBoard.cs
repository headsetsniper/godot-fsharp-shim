// <auto-generated>
// This file was generated by Headsetsniper.Godot.FSharp.ShimGen.
// Do NOT edit this file manually. Any changes will be overwritten.
// ShimGenVersion: 0.5.7
// Source F# type: Game.TetrisBoardImpl
// SourceFile: TetrisBoard.fs
// SourceHash: a002e9d1177a21afb699dfd6aed3fb9ebb9eb19ac5e6dbd9d181a0cd87ea7ac0
// </auto-generated>

using Godot;
using Headsetsniper.Godot.FSharp.Annotations;
namespace Generated;
[GlobalClass]
public partial class TetrisBoard : Godot.Node2D
{
    private readonly Game.TetrisBoardImpl _impl = new Game.TetrisBoardImpl();
    [Export] public System.Single CellSize { get => _impl.CellSize; set => _impl.CellSize = value; }
    [Export] public System.Int32 MoveX { get => _impl.MoveX; set => _impl.MoveX = value; }
    [Export] public System.Boolean RotateRequested { get => _impl.RotateRequested; set => _impl.RotateRequested = value; }
    [Export] public System.Boolean HardDrop { get => _impl.HardDrop; set => _impl.HardDrop = value; }
    [Export] public System.Int32 Score { get => _impl.Score; set => _impl.Score = value; }
    public override void _Ready()
    {
        if (_impl is IGdScript<Godot.Node2D> gd)
            gd.Node = this;
        _impl.Ready();
    }
    public override void _Process(double delta) => _impl.Process(delta);
}
